---
title: "Mapas en R" 
subtitle: "InteRculturales"
author: "Matías Deneken"
date: today
format:
  html:
    toc-title: "Contenidos"
    theme: cosmo
    toc: true
    toc-depth: 3
    number-sections: true
    include-in-header:
      text: |
        <style>
          body::before {
            content: url('img/ciir_en-negro-vertical.jpg');
            display: block;
            text-align: left;
            margin-bottom: 5px; /* Reducido a 5px para un espacio mínimo */
            transform: scale(0.5);
          }
          body::before img {
            max-width: 100px;
            height: auto;
          }
          #title-block-header {
            margin-top: 0; /* Eliminado el margen superior */
          }
          .quarto-title {
            margin-top: 0; /* Asegura que no haya espacio extra arriba del título */
          }
        </style>
editor: visual
reference-location: margin
citation-location: margin
---

## Cargar paquete de datos.


```{r}
library(chilemapas) # mapas de chile
library(dplyr) # manipulación de datos
library(ggplot2) # visualización de datos
library(scales) # utilidad para visualización de datos
library(sf) # manipulación de datos geográficos
```

```{r}
mapa_comunas <- chilemapas::mapa_comunas

mapa_comunas
```

```{r}
grafico_comunas <- mapa_comunas |> 
  st_set_geometry(mapa_comunas$geometry) |> # asignar geometría
  ggplot() + # gráfico
  geom_sf() # capa geométrica

grafico_comunas +
  theme_classic()
```

```{r}
grafico_comunas + 
  coord_sf(xlim = c(-77, -65)) +
  theme_classic()
```

```{r}
mapa_regiones <- mapa_comunas |> 
  group_by(codigo_region) |> 
  summarize(geometry = st_union(geometry)) # resumir los datos agrupados uniéndolos

mapa_regiones
```

```{r}
grafico_regiones <- mapa_regiones |> 
  st_set_geometry(mapa_regiones$geometry) |> # especificar la geometría del mapa
  ggplot() + # graficar
  geom_sf() + # capa geográfica
  coord_sf(xlim = c(-77, -65)) # recortar coordenadas

grafico_regiones +
  theme_classic()
```

```{r}
library(rvest)

# dirección de wikipedia con tabla de comunas de Chile
url <- "https://es.wikipedia.org/wiki/Anexo:Comunas_de_Chile"

# obtener tabla con datos de comunas con web scraping
tabla <- session(url) |> 
  read_html() |> 
  html_table(convert = FALSE)

tabla[[1]]
```

```{r}
library(janitor)
library(stringr)

# limpiar datos
datos_comunas <- tabla[[1]] |> 
  clean_names() |> 
  # seleccionar y renombrar columnas
  select(codigo_comuna = cut_codigo_unico_territorial,
         nombre, region, superficie_km2,
         poblacion = poblacion2020) |> 
  # eliminar espacios de la columna de población
  mutate(poblacion = str_remove_all(poblacion, " "),
         poblacion = as.numeric(poblacion)) |> 
  # eliminar los separadores de miles
  mutate(superficie_km2 = str_remove_all(superficie_km2, "\\."),
         # convertir comas a puntos
         superficie_km2 = str_replace(superficie_km2, ",", "."),
         superficie_km2 = as.numeric(superficie_km2))

datos_comunas
```


```{r}
tabla_a <- tribble(~animal,   ~favorito, 
                   "gato",    "pescado", 
                   "mapache", "basura",
                   "perro",   "carne")

tabla_b <- tribble(~animal,   ~belleza, ~inteligencia, ~carisma,
                   "gato",    8,        6,             5,
                   "perro",   5,        2,             8,
                   "mapache", 10,       7,             2)

left_join(tabla_a, 
          tabla_b, 
          by = "animal")
```

```{r}
mapa_comunas_2 <- mapa_comunas |> 
  # adjuntar datos al mapa, coincidiendo por columna de código de comunas
  left_join(datos_comunas,
            by = join_by(codigo_comuna)) |> 
  relocate(geometry, .after = 0) # tirar geometría al final

mapa_comunas_2
```

```{r}
mapa_comunas_2 |> 
  st_set_geometry(mapa_comunas_2$geometry) |> # asignar geometría
  ggplot() + # gráfico
  aes(fill = poblacion) +
  geom_sf(linewidth = 0) + # capa geométrica
  theme_classic() +
  scale_fill_distiller(type = "seq", palette = 12, 
                       labels = label_comma(big.mark = ".")) + # colores
  scale_x_continuous(breaks = seq(-76, -65, length.out = 3) |> floor()) + # escala x
  coord_sf(xlim = c(-77, -65)) + # recortar coordenadas
  theme(legend.key.width = unit(3, "mm"))
```

```{r}
mapa_comunas_2 |> 
  st_set_geometry(mapa_comunas_2$geometry) |>
  ggplot() +
  aes(fill = superficie_km2) + # variable de relleno
  geom_sf(linewidth = 0) +
  theme_classic() +
  scale_fill_distiller(type = "seq", palette = 11,
                       labels = label_comma(big.mark = ".")) + 
  scale_x_continuous(breaks = seq(-76, -65, length.out = 3) |> floor()) +
  coord_sf(xlim = c(-77, -65)) + 
  theme(legend.key.width = unit(3, "mm"))
```

```{r}
# filtrar datos
mapa_comunas_filtro <- mapa_comunas_2 |> 
  filter(codigo_region == "06")

# mapa
mapa_comunas_filtro |> 
  st_set_geometry(mapa_comunas_filtro$geometry) |>
  ggplot() +
  aes(fill = poblacion) +
  geom_sf(linewidth = 0.12, color = "white") +
  geom_sf_text(aes(label = comma(poblacion, big.mark = ".")), 
               size = 2, color = "white", check_overlap = T) +
  theme_classic() +
  scale_fill_distiller(type = "seq", palette = 12,
                       labels = label_comma(big.mark = ".")) + 
  theme(legend.key.width = unit(3, "mm")) +
  theme(axis.title = element_blank())
```


```{r}
library(rvest)

# dirección del sitio del banco central
url <- "https://si3.bcentral.cl/Siete/ES/Siete/Cuadro/CAP_CCNN/MN_CCNN76/CCNN2018_PIB_REGIONAL_N/637899740344107786"

# obtener tabla con datos de comunas con web scraping
tabla_pib <- session(url) |> 
  read_html() |> 
  html_table(convert = FALSE)
```

```{r}
datos_regiones <- tabla_pib [[1]] |> 
  janitor::clean_names() |> 
  select(region = serie, pib = x2023) |> 
  mutate(pib = str_remove_all(pib, "\\."),
         pib = as.numeric(pib)) |> 
  filter(str_detect(region, "Región"))

datos_regiones
```

```{r}
datos_regiones_2 <- datos_regiones |> 
  mutate(codigo_region = case_when(
    str_detect(region, "Arica") ~ 15,
    str_detect(region, "Tarapacá") ~ 1,
    str_detect(region, "Antofagasta") ~ 2,
    str_detect(region, "Atacama") ~ 3,
    str_detect(region, "Coquimbo") ~ 4,
    str_detect(region, "Valparaíso") ~ 5,
    str_detect(region, "Metropolitana") ~ 13,
    str_detect(region, "Libertador General") ~ 6,
    str_detect(region, "Maule") ~ 7,
    str_detect(region, "Ñuble") ~ 16,
    str_detect(region, "Biobío") ~ 8,
    str_detect(region, "Araucanía") ~ 9,
    str_detect(region, "Los Ríos") ~ 14,
    str_detect(region, "Los Lagos") ~ 10,
    str_detect(region, "Aysén") ~ 11,
    str_detect(region, "Magallanes") ~ 12
  )) |> 
  rename(nombre_region = region)
```

```{r}
mapa_regiones_2 <- mapa_regiones |> 
  mutate(codigo_region = as.numeric(codigo_region)) |> 
  left_join(datos_regiones_2,
            by = join_by(codigo_region)) |> 
  relocate(geometry, .after = 0) # tirar columna al final

mapa_regiones_2
```

```{r}
mapa_regiones_2 |> 
  st_set_geometry(mapa_regiones_2$geometry) |> # asignar geometría
  ggplot() + # gráfico
  aes(fill = pib) +
  geom_sf(linewidth = 0.12, color = "white") + # capa geométrica
  theme_classic() +
  scale_fill_distiller(type = "seq", palette = 18,
                       labels = label_comma(big.mark = ".")) +
  scale_x_continuous(breaks = seq(-76, -65, length.out = 3) |> floor()) +
  coord_sf(expand = F, xlim = c(-77, -65)) + # recortar coordenadas
  theme(legend.key.width = unit(3, "mm"))
```

